import os
from datetime import datetime
from typing import Callable, Dict


def client_helper() -> str:
    """
    This function shows the client helper, giving to the user some explanation
    about what each command will do.

    Returns
    -------
    pokemon_set:
        The helper message.
    """

    helper_msg: str = """
    Hello! Welcome to the Pokedex.

    Here you can choose between the following options, that are:

    --trivia

    If you choose trivia we'll show you some interesting  information
    about the pokemon, or digimon list you provided, notice that this
    option only works with one file at time, so inform just one list
    for each time you use this option.

    For the next two options notice we'll need two players, each player
    will need to provide a list, since the functions work with comparisons:

    --info

    We'll show you some comparative information about the two players
    pokemon, or digimon lists.

    --battle

    The two players will challenge each other, using their three strongest
    pokemon or digimon, where the first monster to fall decides
    the winner and we'll show you the battle results.

    """
    return helper_msg


def client_usage() -> str:
    """
    This function shows the client usage, giving to the user instructions
    about how to use the dex, and explain some important details about types
    of file formats supported.

    Returns
    -------
    pokemon_set:
        The client usage message.
    """
    client_usage_msg: str = """
    CLI usage:

    > python3 main.py --help
    > python3 pokedex/main.py --player1 pokemons_1.json --trivia  --id 1
    > python3 pokedex/main.py --player1 pokemons_1.json --player2 pokemons_2.json --id 1 --info
    > python3 pokedex/main.py --player1 pokemons_1.json --player2 pokemons_2.json --id 1 --battle

    ATTENTION:

    Where you read <pokemons_1.json> or <pokemons_2.json>
    Notice that both lists don't need to be in the same format, here you
    can use more than one file format at the same time, like a json and a
    csv list at the same time, it will work as well.
    You can use the formats that best suits your needs:
    Example --> pokemons_1.json  pokemons_2.json
                    pokemons_1.csv   pokemons_2.csv
                    pokemons_1.xml   pokemons_2.xml
                    pokemons_1.yaml  pokemons_2.yaml

    For all options you'll need to inform an id so the function can
    save the log in a text file, if you don't inform any id number it
    will be automatically set as 0. The id is a key name to make the file
    unique, making it possible have multiple files with different data
    across them.

    Before using the function you can choose what will be done with the
    information generated, answering the question that will be displayed:

    What do you prefer to do?

    [append|OVERWRITE]

    append -> This function will increment the file, keeping the
    information that already exists on the file and simply add
    the new one, to choose this type any of this:

    'a','A','Append','append','APPEND'

    OVERWRITE -> This option will delete the existing file and
    create a new one with the generated information, to choose
    this type any of this:

    'o','O','Overwrite','overwrite','OVERWRITE'.

    WARNING: If you don't choose an option, and just hit enter
    it will automatically use OVERWRITE option.
    """
    return client_usage_msg


def save_data(
    saved_data: Callable[[str], int], archive_type: str, id_number: str) -> None:
    """
    This function creates a .txt file and saves the generated information
    in it.

    Parameters
    ----------
    saved_data:
        The information generated by one of the given commands.

    archive_type:
        The command selected by the user that will compose the
        file name and specify what kind it is.

    id_number:
        The id provided by the user, in case its not provided
        it will be filled with 0.

    Returns
    -------
    pokemon_set:
        The .txt file named as the command and id provided by the user.
    """

    if os.path.exists(f"{id_number}_{archive_type}.txt"):
        user_choice: str = input(
            f"File {id_number}_{archive_type}.txt already exists, "
            + "what do you prefer to do? [append|OVERWRITE] : "
        )

        if user_choice.lower() == "o" or user_choice.lower() == "overwrite":
            os.remove(f"{id_number}_{archive_type}.txt")

            print("File Overwritten successfully!")

            with open(f"{id_number}_{archive_type}.txt", "w") as target:
                target.write(saved_data)

        elif user_choice.lower() == "a" or user_choice.lower() == "append":
            with open(f"{id_number}_{archive_type}.txt", "a") as target:
                target.write(saved_data)
                print("New entry added to the file successfully!")
        else:
            print(f"WARNING: Invalid Input.\n{client_usage()}")
            quit()

    else:
        with open(f"{id_number}_{archive_type}.txt", "w") as target:
            target.write(saved_data)


def show_pokemon_trivia(pokemons_info: str, id_number: str) -> None:
    """
    This function will show a message in the CLI.

    Parameters
    ----------
    pokemons_info:
        Bring the treated variables which will be used to answer
        the questions

    id_number:
        The id provided by the user, in case its not provided
        it will be filled with 0.

    Returns
    -------
        A message containing some specific information about the
        data provided.
    """
    datenow = datetime.now()
    msg = (" " * 80) + "\n"
    msg += "reported generated on: " + datenow.isoformat() + (" " * 31) + "\n"
    msg += (" " * 80) + "\n"
    msg += ("=" * 29) + " Welcome to the Dex! " + ("=" * 30) + "\n"
    msg += (" " * 80) + "\n"
    msg += "Here we have some useful information gathered from the list you provided us:    \n"
    msg += (" " * 80) + "\n"
    msg += "1. How many pokemons there is in this list:" + (" " * 37) + "\n"
    msg += (
        (" " * 4)
        + "> "
        + pokemons_info["total_trivia"]
        + " pokemons"
        + (" " * (25 - len(pokemons_info["total_trivia"])))
        + "\n"
    )
    msg += (" " * 80) + "\n"
    msg += "2. The pokemon with the highest HP point is:" + (" " * 36) + "\n"
    msg += (
        (" " * 4)
        + ">"
        + pokemons_info["hp_trivia_name"]
        + " with "
        + pokemons_info["hp_trivia_points"]
        + " HP points"
        + (
            " "
            * (
                (59 - len(pokemons_info["hp_trivia_name"]))
                - len(pokemons_info["hp_trivia_points"])
            )
        )
        + "\n"
    )
    msg += (" " * 80) + "\n"
    msg += "3. Which one has the strongest attack:" + (" " * 42) + "\n"
    msg += (
        (" " * 4)
        + ">"
        + pokemons_info["atk_trivia_name"]
        + " with "
        + pokemons_info["atk_trivia_points"]
        + " attack points."
        + (
            " "
            * (
                (54 - len(pokemons_info["atk_trivia_name"]))
                - len(pokemons_info["atk_trivia_points"])
            )
        )
        + "\n"
    )
    msg += (" " * 80) + "\n"
    msg += "4. Which one has the strongest defense:" + (" " * 41) + "\n"
    msg += (
        (" " * 4)
        + ">"
        + pokemons_info["def_trivia_name"]
        + " with "
        + pokemons_info["def_trivia_points"]
        + " defense points."
        + (
            " "
            * (
                (53 - len(pokemons_info["def_trivia_name"]))
                - len(pokemons_info["def_trivia_points"])
            )
        )
        + "\n"
    )
    msg += (" " * 80) + "\n"
    msg += "5. Which one is the fastest:" + (" " * 52) + "\n"
    msg += (
        (" " * 4)
        + ">"
        + pokemons_info["spd_trivia_name"]
        + " with "
        + pokemons_info["spd_trivia_points"]
        + " speed points."
        + (
            " "
            * (
                (55 - len(pokemons_info["spd_trivia_name"]))
                - len(pokemons_info["spd_trivia_points"])
            )
        )
        + "\n"
    )
    msg += (" " * 80) + "\n"
    msg += "Thanks for using this Dex!" + (" " * 50) + "\n"
    msg += (" " * 80) + "\n"
    msg += ("=" * 80) + "\n"
    msg += (" " * 80) + "\n"

    print(msg.format(**pokemons_info))

    save_data(msg, "pokemon-trivia", id_number)


def show_digimon_trivia(digimon_info: str, id_number: str) -> None:
    """
    This function will show a message in the CLI.

    Parameters
    ----------
    pokemons_info:
        Bring the treated variables which will be used to answer
        the questions

    id_number:
        The id provided by the user, in case its not provided
        it will be filled with 0.

    Returns
    -------
        A message containing some specific information about the
        data provided.
    """
    
    datenow = datetime.now()
    msg = (" " * 80) + "\n"
    msg += "reported generated on: " + datenow.isoformat() + (" " * 31) + "\n"
    msg += (" " * 80) + "\n"
    msg += ("=" * 29) + " Welcome to the Dex! " + ("=" * 30) + "\n"
    msg += (" " * 80) + "\n"
    msg += "Here we have some useful information gathered from the list you provided us:    \n"
    msg += (" " * 80) + "\n"
    msg += "1. How many Digimon there is in this list:" + (" " * 37) + "\n"
    msg += (
        (" " * 4)
        + "> "
        + digimon_info["total_trivia"]
        + " digimon"
        + (" " * (25 - len(digimon_info["total_trivia"])))
        + "\n"
    )
    msg += (" " * 80) + "\n"
    msg += "2. How many digimon in each stage there are?" + (" " * 36) + "\n"
    msg += (
        (" " * 4)
        + "> "
        + "Baby: " 
        + digimon_info["total_baby"] 
        + " digimon" 
        + (" " * (60 - len(digimon_info["total_baby"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Rookie: " 
        + digimon_info["total_rookie"] 
        + " digimon" 
        + (" " * (58 - len(digimon_info["total_rookie"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Champion: " 
        + digimon_info["total_champion"] 
        + " digimon" 
        + (" " * (56 - len(digimon_info["total_champion"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Ultimate: " 
        + digimon_info["total_ultimate"] 
        + " digimon" 
        + (" " * (56 - len(digimon_info["total_ultimate"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Mega: " 
        + digimon_info["total_mega"] 
        + " digimon" 
        + (" " * (60 - len(digimon_info["total_mega"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Ultra: " 
        + digimon_info["total_ultra"] 
        + " digimon" 
        + (" " * (59 - len(digimon_info["total_ultra"])))
        + "\n"
    )
    msg += (" " * 80) + "\n"
    msg += "3. The strongest digimon in each stage based on the Atk attribute is:" + (" " * 11) + "\n"
    msg += (
        (" " * 4)
        + "> "
        + "Baby: " 
        + digimon_info["baby_strongest"] 
        + (" " * (68 - len(digimon_info["baby_strongest"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Rookie: " 
        + digimon_info["rookie_strongest"] 
        + (" " * (66 - len(digimon_info["rookie_strongest"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Champion: " 
        + digimon_info["champion_strongest"] 
        + (" " * (64 - len(digimon_info["champion_strongest"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Ultimate: " 
        + digimon_info["ultimate_strongest"] 
        + (" " * (64 - len(digimon_info["ultimate_strongest"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Mega: " 
        + digimon_info["mega_strongest"] 
        + (" " * (66 - len(digimon_info["mega_strongest"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Ultra: " 
        + digimon_info["ultra_strongest"] 
        + (" " * (67 - len(digimon_info["ultra_strongest"])))
        + "\n"
    )
    msg += (" " * 80) + "\n"
    msg += "4. How many different types there is?:" + (" " * 42) + "\n"
    msg += (
        (" " * 4)
        + "> In this list we have " 
        + digimon_info["types_sum"]
        + " types of digimon, they're " 
        + " ".join(digimon_info["digimon_types"])
        + "\n"
    )
    msg += (" " * 80) + "\n"
    msg += "5. How many digimon in each type there is:" + (" " * 42) + "\n"
    msg += (
        (" " * 4)
        + "> "
        + "Data: " 
        + digimon_info["total_data"] 
        + (" " * (68 - len(digimon_info["total_data"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Vaccine: " 
        + digimon_info["total_vaccine"] 
        + (" " * (65 - len(digimon_info["total_vaccine"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Virus: " 
        + digimon_info["total_virus"] 
        + (" " * (67 - len(digimon_info["total_virus"])))
        + "\n"
    )
    msg += (
        (" " * 4)
        + "> "
        + "Free: " 
        + digimon_info["total_free"] 
        + (" " * (68 - len(digimon_info["total_free"])))
        + "\n"
    )
    msg += (" " * 80) + "\n"
    msg += "6. Which is the weakest digimon:" + (" " * 48) + "\n"
    msg += (
        (" " * 4)
        + "> "
        + "The weakest digimon is "
        + digimon_info["lowest_atk_name"]
        + ", on "
        + digimon_info["lowest_atk_stage"]
        + " stage, "
        + digimon_info["lowest_atk_type"]
        + " type."
        +"\n"
    )
    msg += (" " * 80) + "\n"
    msg += "6. Which is the strongest digimon:" + (" " * 46) + "\n"
    msg += (
        (" " * 4)
        + "> "
        + "The strongest digimon is "
        + digimon_info["highest_atk_name"]
        + ", on "
        + digimon_info["highest_atk_stage"]
        + " stage, "
        + digimon_info["highest_atk_type"]
        + " type."
        +"\n"
    )
    msg += (" " * 80) + "\n"
    msg += "Thanks for using this Dex!" + (" " * 50) + "\n"
    msg += (" " * 80) + "\n"
    msg += ("=" * 80) + "\n"
    msg += (" " * 80) + "\n"
    # msg += (" " * 4) + ">" + digimon_info["digimon_types"] + " different types " + "\n"
    # 1 - How many digimon there is?
    # Len

    # 2 - How many digimon in each stage there is?

    # Baby:{x} digimon
    # Rookie: {x} digimon
    # Champion: {x} digimon
    # Ultimate: {x} digimon
    # Mega: {x} digimon

    # The strongest digimon in each stage based on the Atk attribute is:

    # Baby:{digimon}
    # Rookie:{digimon}
    # Champion:{digimon}
    # Ultimate:{digimon}
    # Mega:{digimon}


    # 3 - How many different types there is?

    # In this list we have {x} types of digimon, they're Data,Vaccine,Virus and Free.

    # How many digimon in each type there is:

    # Data: {x} digimon
    # Vaccine: {x} digimon
    # Virus: {x} digimon
    # Free: {x} digimon
    
    # 4 - The weakest digimon is {name}, on {stage} stage, {type} type.
    
    # 5 - The strongest digimon is {name}, on {stage} stage, {type} type.
    

    print(msg.format(**digimon_info))

    save_data(msg, "digimon-trivia", id_number)


def show_battle_winner(battle_result: Callable, id_number: str) -> None:
    """
    This function will show a message in the CLI.

    Parameters
    ----------
    battle_result:
        Bring the treated variables which will be used to answer
        the questions


    id_number:
        The id provided by the user, in case its not provided
        it will be filled with 0.

    Returns
    -------
        A message containing the results of the battle function.
    """
    datenow = datetime.now()
    battle_msg = (" " * 80) + "\n"
    battle_msg += "reported generated on: " + datenow.isoformat() + (" " * 31) + "\n"
    battle_msg += (" " * 80) + "\n"
    battle_msg += "" + (("=" * 32) + " MONSTER BATTLE " + ("=" * 32) + "\n")
    battle_msg += (" " * 80) + "\n"
    battle_msg += " " + ("-" * 78) + " \n"
    battle_msg += "|" + (" " * 35) + "PLAYER 1" + (" " * 35) + "|\n"
    battle_msg += " " + ("-" * 78) + " \n"
    battle_msg += (
        "|Name:"
        + battle_result["p1_pkm_1_name"]
        + (" " * (21 - len(battle_result["p1_pkm_1_name"])))
        + "|Name:"
        + battle_result["p1_pkm_2_name"]
        + (" " * (20 - len(battle_result["p1_pkm_2_name"])))
        + "|Name:"
        + battle_result["p1_pkm_3_name"]
        + (" " * (20 - len(battle_result["p1_pkm_3_name"])))
        + "|\n"
    )
    battle_msg += (
        "|HP:"
        + str(battle_result["p1_pkm_1_hp"])
        + (" " * (23 - len(str(battle_result["p1_pkm_1_hp"]))))
        + "|HP:"
        + str(battle_result["p1_pkm_2_hp"])
        + (" " * (22 - len(str(battle_result["p1_pkm_2_hp"]))))
        + "|HP:"
        + str(battle_result["p1_pkm_3_hp"])
        + (" " * (22 - len(str(battle_result["p1_pkm_3_hp"]))))
        + "|\n"
    )
    battle_msg += (
        "|Attack:"
        + str(battle_result["p1_pkm_1_atk"])
        + (" " * (19 - len(str(battle_result["p1_pkm_1_atk"]))))
        + "|Attack:"
        + str(battle_result["p1_pkm_2_atk"])
        + (" " * (18 - len(str(battle_result["p1_pkm_2_atk"]))))
        + "|Attack:"
        + str(battle_result["p1_pkm_3_atk"])
        + (" " * (18 - len(str(battle_result["p1_pkm_3_atk"]))))
        + "|\n"
    )
    battle_msg += (
        "|Defense:"
        + str(battle_result["p1_pkm_1_dfs"])
        + (" " * (18 - len(str(battle_result["p1_pkm_1_dfs"]))))
        + "|Defense:"
        + str(battle_result["p1_pkm_2_dfs"])
        + (" " * (17 - len(str(battle_result["p1_pkm_2_dfs"]))))
        + "|Defense:"
        + str(battle_result["p1_pkm_3_dfs"])
        + (" " * (17 - len(str(battle_result["p1_pkm_3_dfs"]))))
        + "|\n"
    )
    battle_msg += " " + ("-" * 78) + " \n"
    battle_msg += "|" + (" " * 35) + "PLAYER 2" + (" " * 35) + "|\n"
    battle_msg += " " + ("-" * 78) + " \n"
    battle_msg += (
        "|Name:"
        + battle_result["p2_pkm_1_name"]
        + (" " * (21 - len(battle_result["p2_pkm_1_name"])))
        + "|Name:"
        + battle_result["p2_pkm_2_name"]
        + (" " * (20 - len(battle_result["p2_pkm_2_name"])))
        + "|Name:"
        + battle_result["p2_pkm_3_name"]
        + (" " * (20 - len(battle_result["p2_pkm_3_name"])))
        + "|\n"
    )
    battle_msg += (
        "|HP:"
        + str(battle_result["p2_pkm_1_hp"])
        + (" " * (23 - len(str(battle_result["p2_pkm_1_hp"]))))
        + "|HP:"
        + str(battle_result["p2_pkm_2_hp"])
        + (" " * (22 - len(str(battle_result["p2_pkm_2_hp"]))))
        + "|HP:"
        + str(battle_result["p2_pkm_3_hp"])
        + (" " * (22 - len(str(battle_result["p2_pkm_3_hp"]))))
        + "|\n"
    )
    battle_msg += (
        "|Attack:"
        + str(battle_result["p2_pkm_1_atk"])
        + (" " * (19 - len(str(battle_result["p2_pkm_1_atk"]))))
        + "|Attack:"
        + str(battle_result["p2_pkm_2_atk"])
        + (" " * (18 - len(str(battle_result["p2_pkm_2_atk"]))))
        + "|Attack:"
        + str(battle_result["p2_pkm_3_atk"])
        + (" " * (18 - len(str(battle_result["p2_pkm_3_atk"]))))
        + "|\n"
    )
    battle_msg += (
        "|Defense:"
        + str(battle_result["p2_pkm_1_dfs"])
        + (" " * (18 - len(str(battle_result["p2_pkm_1_dfs"]))))
        + "|Defense:"
        + str(battle_result["p2_pkm_2_dfs"])
        + (" " * (17 - len(str(battle_result["p2_pkm_2_dfs"]))))
        + "|Defense:"
        + str(battle_result["p2_pkm_3_dfs"])
        + (" " * (17 - len(str(battle_result["p2_pkm_3_dfs"]))))
        + "|\n"
    )
    battle_msg += " " + ("-" * 78) + " \n"
    battle_msg += " " + ("=" * 78) + " \n"
    battle_msg += "|" + (" " * 30) + "+++++ RESULT +++++" + (" " * 30) + "|\n"
    battle_msg += " " + ("=" * 78) + " \n"
    battle_msg += "|" + (" " * 25) + ("-" * 28) + (" " * 25) + "|\n"
    battle_msg += "|" + (" " * 34) + "--Winner--" + (" " * 34) + "|\n"
    battle_msg += (
        "|" + (" " * 35) + "Player " + str(battle_result["winner"]) + (" " * 35) + "|\n"
    )
    battle_msg += "|" + (" " * 25) + ("-" * 28) + (" " * 25) + "|\n"
    battle_msg += "|" + (" " * 34) + "--Rounds--" + (" " * 34) + "|\n"
    battle_msg += (
        "|"
        + (" " * (39 - (len(str(battle_result["p2_pkm_2_dfs"])) // 2)))
        + str(battle_result["rounds"])
        + (" " * (39 - (len(str(battle_result["p2_pkm_2_dfs"])) // 2)))
        + "|\n"
    )
    battle_msg += "|" + (" " * 25) + ("-" * 28) + (" " * 25) + "|\n"
    battle_msg += "|" + (" " * 26) + "--First monster to fall--" + (" " * 27) + "|\n"
    battle_msg += (
        "|"
        + (" " * (38 - (len(battle_result["loser_pokemon"]) // 2)))
        + battle_result["loser_pokemon"]
        + (" " * (39 - (len(battle_result["loser_pokemon"]) // 2)))
        + "|\n"
    )
    battle_msg += " " + ("=" * 78) + " \n"
    battle_msg += (" " * 80) + "\n"
    battle_msg += ("=" * 80) + "\n"
    battle_msg += (" " * 80) + "\n"

    print(battle_msg.format(**battle_result))

    save_data(battle_msg, "battle", id_number)


def show_info(process_pokemons: Callable[[str], Dict], id_number: str, archive_type: str) -> None:
    """
    This function will show a message in the CLI.

    Parameters
    ----------
    process_pokemons:
        Bring the treated variables which will be used to answer
        the questions

    id_number:
        The id provided by the user, in case its not provided
        it will be filled with 0.

    Returns
    -------
        A message containing some specific information about the
        data provided.
    """
    datenow = datetime.now()
    msg = (" " * 80) + "\n"
    msg += "reported generated on: " + datenow.isoformat() + (" " * 31) + "\n"
    msg += (" " * 80) + "\n"
    
    if archive_type == "--pokemon":
        msg += " " + (("=" * 32) + " POKEMON INFO " + ("=" * 32) + " \n")
        msg += (
            "|" + (" " * 18) + "| PLAYER 1" + (" " * 20) + "| PLAYER 2" + (" " * 20) + "|\n"
        )
        msg += "|" + ("-" * 18) + "|" + ("-" * 29) + "|" + ("-" * 29) + "|\n"
        msg += (
            "|Pokemons"
            + (" " * 10)
            + "| "
            + process_pokemons["player1_total_pokemons_info"]
            + (" " * (28 - len(process_pokemons["player1_total_pokemons_info"])))
            + "| "
            + process_pokemons["player2_total_pokemons_info"]
            + (" " * (28 - len(process_pokemons["player1_total_pokemons_info"])))
            + "|\n"
        )
        msg += (
            "|Strongest Pokémon"
            + " | "
            + process_pokemons["strongest_pokemon_player1_info"]
            + (" " * (28 - len(process_pokemons["strongest_pokemon_player1_info"])))
            + "| "
            + process_pokemons["strongest_pokemon_player2_info"]
            + (" " * (28 - len(process_pokemons["strongest_pokemon_player2_info"])))
            + "|\n"
        )
        msg += (
            "|Legendary"
            + (" " * 9)
            + "| "
            + process_pokemons["legendary_player1_info"]
            + (" " * (28 - len(process_pokemons["legendary_player1_info"])))
            + "| "
            + process_pokemons["legendary_player2_info"]
            + (" " * (28 - len(process_pokemons["legendary_player2_info"])))
            + "|\n"
        )
        msg += (
            "|Ultimate Digimon"
            + (" " * 1)
            + "| "
            + process_pokemons["legendary_player1_info"]
            + (" " * (28 - len(process_pokemons["legendary_player1_info"])))
            + "| "
            + process_pokemons["legendary_player2_info"]
            + (" " * (28 - len(process_pokemons["legendary_player2_info"])))
            + "|\n"
        )
        msg += (
            "|Repeated Pokemons"
            + " | "
            + process_pokemons["repeated_pokemon_info"]
            + (" " * (58 - len(process_pokemons["repeated_pokemon_info"])))
            + "|\n"
        )
        msg += (
            "|Different Pokemons"
            + "| "
            + process_pokemons["different_pokemon_info"]
            + (" " * (58 - len(process_pokemons["different_pokemon_info"])))
            + "|\n"
        )
    elif archive_type == "--digimon":
        msg += " " + (("=" * 32) + " DIGIMON INFO " + ("=" * 32) + " \n")
        msg += (
            "|" + (" " * 18) + "| PLAYER 1" + (" " * 20) + "| PLAYER 2" + (" " * 20) + "|\n"
        )
        msg += "|" + ("-" * 18) + "|" + ("-" * 29) + "|" + ("-" * 29) + "|\n"
        msg += (
            "|Digimons"
            + (" " * 10)
            + "| "
            + process_pokemons["player1_total_pokemons_info"]
            + (" " * (28 - len(process_pokemons["player1_total_pokemons_info"])))
            + "| "
            + process_pokemons["player2_total_pokemons_info"]
            + (" " * (28 - len(process_pokemons["player1_total_pokemons_info"])))
            + "|\n"
        )
        msg += (
            "|Strongest Digimon"
            + " | "
            + process_pokemons["strongest_pokemon_player1_info"]
            + (" " * (28 - len(process_pokemons["strongest_pokemon_player1_info"])))
            + "| "
            + process_pokemons["strongest_pokemon_player2_info"]
            + (" " * (28 - len(process_pokemons["strongest_pokemon_player2_info"])))
            + "|\n"
        )
        msg += (
            "|Mega Digimon"
            + (" " * 7)
            + "| "
            + process_pokemons["legendary_player1_info"]
            + (" " * (28 - len(process_pokemons["legendary_player1_info"])))
            + "| "
            + process_pokemons["legendary_player2_info"]
            + (" " * (28 - len(process_pokemons["legendary_player2_info"])))
            + "|\n"
        )
        msg += (
            "|Repeated Digimons"
            + " | "
            + process_pokemons["repeated_pokemon_info"]
            + (" " * (58 - len(process_pokemons["repeated_pokemon_info"])))
            + "|\n"
        )
        msg += (
            "|Different Digimons"
            + "| "
            + process_pokemons["different_pokemon_info"]
            + (" " * (58 - len(process_pokemons["different_pokemon_info"])))
            + "|\n"
        )
    msg += "|" + ("-" * 18) + "|" + ("-" * 59) + "|\n"
    msg += " " + (("=" * 78) + " \n")
    msg += (" " * 80) + "\n"

    print(msg.format(**process_pokemons))

    save_data(msg, "info", id_number)
